#!/usr/bin/env python2.7

import argparse
import logging
import os
import sys

from deploy.utils.constants import DEPLOYMENT_LABELS, DEPLOYABLE_COMPONENTS
from deploy.utils.deploy_utils import deploy
from deploy.utils.servctl_utils import print_log, port_forward, exec_command, show_dashboard, show_status, \
    troubleshoot_component, kill_components, kill_and_delete_all, get_component_port_pairs, \
    check_kubernetes_context
from utils.shell_utils import wait_for

logging.basicConfig(stream=sys.stdout, format='%(asctime)s %(levelname)-8s %(message)s', level=logging.INFO)
logger = logging.getLogger()


STATUS_SYNONYMS = ['status', 'info']

DEPLOY_SYNONYMS = ['deploy']

LOG_SYNONYMS = ['log', 'logs']
TROUBLESHOOT_SYNONYMS = ['troubleshoot', 'describe']

PORT_FORWARD_SYNONYMS = ['port-forward']
PORT_FORWARD_AND_LOG_SYNONYMS = ['connect-to', 'forward-and-log']

SHELL_SYNONYMS = ['shell', 'bash', 'ssh']
DASHBOARD_SYNONYMS = ['dashboard', 'proxy']

KILL_SYNONYMS = ['kill']
KILL_AND_RESET_ALL_SYNONYMS = ['kill-and-delete-all']

p = argparse.ArgumentParser()
subparsers = p.add_subparsers(dest='command')

for command in DEPLOY_SYNONYMS:
    def check_restore_db(filename):
        if not os.path.isfile(filename):
            p.error("File doesn't exist: %s" % filename)
        return os.path.abspath(filename)

    sp = subparsers.add_parser(command, description="Deploy one or more components")
    sp.add_argument("-o", "--output-dir", help="output directory for deployment files and logs")
    sp.add_argument("-b", "--build", action="store_true", help="use 'docker build --no-cache' to rebuild docker image from the beginning without using cache")
    sp.add_argument("-d", "--delete-before-deploy", action="store_true", help="use 'kubectl delete' and then 'kubectl create' to deploy component(s) instead of just 'kubectl update'")
    sp.add_argument("-f", "--force", dest="build_and_reset_db", action="store_true", help="Same as -b and -d together - reset the db and rebuild the docker image.")
    sp.add_argument("component", nargs="?", help="if provided, only this one component will be deployed. Otherwise, all components will be deployed.", choices=DEPLOYABLE_COMPONENTS)
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="which kubernetes cluster to deploy to")


for command in LOG_SYNONYMS:
    sp = subparsers.add_parser(command, description="Show logs for one or more components")
    sp.add_argument("-f", "--stream-log", action="store_true", help="stream the log")
    sp.add_argument("components", nargs="+", help="show log", choices=DEPLOYABLE_COMPONENTS)
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="kubernetes cluster")

for command in TROUBLESHOOT_SYNONYMS:
    sp = subparsers.add_parser(command, description="Print detailed debugging info to troubleshoot components not starting")
    sp.add_argument("component", help="print detailed debugging info", choices=DEPLOYABLE_COMPONENTS)
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="kubernetes cluster")

for command in PORT_FORWARD_SYNONYMS:
    sp = subparsers.add_parser(command, description="Start port-forwarding for service(s) running inside one or more containers, "
        "allowing connections via localhost. After starting port-forwarding as a background process, start streaming logs from these components. ")
    sp.add_argument("components", nargs="+", help="start port-forwarding for service(s) running in the given component container(s), allowing connections via localhost", choices=DEPLOYABLE_COMPONENTS)
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="kubernetes cluster")

for command in PORT_FORWARD_AND_LOG_SYNONYMS:
    sp = subparsers.add_parser(command, description="Start port-forwarding for service(s) running inside one or more containers, allowing connections via localhost")
    sp.add_argument("components", nargs="+", help="start port-forwarding for service(s) running in the given component container(s), allowing connections via localhost", choices=DEPLOYABLE_COMPONENTS)
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="kubernetes cluster")

for command in SHELL_SYNONYMS:
    sp = subparsers.add_parser(command, description="Open a bash shell inside one of the component containers")
    sp.add_argument("component", help="open a bash shell inside this component container", choices=DEPLOYABLE_COMPONENTS)
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="kubernetes cluster")

for command in STATUS_SYNONYMS:
    sp = subparsers.add_parser(command, description="Print docker and kubectl info")

for command in DASHBOARD_SYNONYMS:
    sp = subparsers.add_parser(command, description="Show the kubernetes dashboard")
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="kubernetes cluster")

for command in KILL_SYNONYMS:
    sp = subparsers.add_parser(command, description="Terminate any live deployments, services, and pods for a given component")
    sp.add_argument("components", nargs="+", help="terminate all deployments, services, and pods for the given component(s)", choices=DEPLOYABLE_COMPONENTS)
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="kubernetes cluster")

for command in KILL_AND_RESET_ALL_SYNONYMS:
    sp = subparsers.add_parser(command, description="Kill and reset all components and data")
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="which kubernetes component to delete")

args = p.parse_args()

# process command-line args
if hasattr(args, 'label'):
    check_kubernetes_context(args.label)

if args.command in DEPLOY_SYNONYMS:
    other_settings = {key.upper(): str(value).lower() for key, value in args.__dict__.items() if value not in (None, False)}
    deploy(args.label, component=args.component, other_settings=other_settings)
    if args.component:
        logger.info("=============")
        logger.info("tail %s logs ..." % args.component)
        os.system("sleep 10")

        component_port_pairs = get_component_port_pairs([args.component])
        if component_port_pairs:
            procs1 = port_forward(component_port_pairs, wait=False, open_browser=True)
            procs2 = print_log([args.component], enable_stream_log=True, wait=False)
            wait_for(procs1 + procs2)

elif args.command in LOG_SYNONYMS:
    components = args.components if args.components else DEPLOYABLE_COMPONENTS
    print_log(components, args.stream_log)

elif args.command in PORT_FORWARD_SYNONYMS:
    component_port_pairs = get_component_port_pairs(args.components)
    port_forward(component_port_pairs)

elif args.command in PORT_FORWARD_AND_LOG_SYNONYMS:
    component_port_pairs = get_component_port_pairs(args.components)
    procs1 = port_forward(component_port_pairs, wait=False, open_browser=True)
    procs2 = print_log(args.components, enable_stream_log=True, wait=False)
    wait_for(procs1 + procs2)

elif args.command in SHELL_SYNONYMS:
    exec_command(args.component, '/bin/bash', is_interactive=True)

elif args.command in STATUS_SYNONYMS:
    show_status()

elif args.command in DASHBOARD_SYNONYMS:
    show_dashboard()

elif args.command in KILL_SYNONYMS:
    kill_components(args.components)

elif args.command in TROUBLESHOOT_SYNONYMS:
    troubleshoot_component(args.component)

elif args.command in KILL_AND_RESET_ALL_SYNONYMS:
    kill_and_delete_all(args.label)